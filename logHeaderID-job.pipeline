// Requires the following In-Process script approvals:
//    method java.net.HttpURLConnection setRequestMethod java.lang.String
//    method java.net.URL openConnection
//    method java.net.URLConnection addRequestProperty java.lang.String java.lang.String
//    method java.net.URLConnection connect
//    method java.net.URLConnection getContent
//    staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream
//    staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods hasProperty java.lang.Object java.lang.String
//    staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toURL java.lang.String

import groovy.json.JsonOutput

pipeline {
    agent {
        node {
            label "master"
        }
    }
    stages {
        stage('build') {
            steps {
                // Execute an Execution Manager request
                execMan request: [name: 'TestRun'], requestType: 'request', altEMConfig: [url:'http://unclefester10/executionmanager', credentials: 'INT-849']
                //execMan request: [name: 'WAIT_0-Pass/Fail'], requestType: 'request', altEMConfig: [url:'http://professorbutts/executionmanager', credentials: 'ProfessorButts']
                script {
                    if (fileExists('execMan-result.json')) {
                        def result = readJSON file: 'execMan-result.json'
                        echo "result=" + JsonOutput.prettyPrint(JsonOutput.toJson(result))

                        for(int i=0; i < result['Tasks'].size(); i++) {
                            def logHeaderID = result['Tasks'][i]['CertifyResultID']
                            def executionStatus = result['Tasks'][i]['ExecutionStatus']
                            if (logHeaderID != null && executionStatus.toUpperCase().equals("FAILED")) {
                                // Retrieve failed test steps from Certify and display them
                                def url = API_URL + "?logHeaderID=" + logHeaderID
                                def api = url.toURL().openConnection()
                                api.addRequestProperty("Accept", "application/json")
                                api.addRequestProperty("token", API_TOKEN)
                                api.setRequestMethod("GET")
                                api.connect()

                                echo "Tasks[" + i +"] logHeaderID=" + logHeaderID + ":" + JsonOutput.prettyPrint(api.content.text)
                            }
                        }
                    }
                }
            }
        }
    }
}
