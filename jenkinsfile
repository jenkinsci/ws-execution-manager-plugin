/*
 * Jenkins build file for Execution Manager Jenkins Plugin
 */

def workspace = 'Hudson-${JOB_NAME}-${NODE_NAME}'
def workspacePath = "E:\\hudson\\Builds\\JenkinsEMPlugin\\${branch}"
def gitRepo ="http://wsengtfs01:8080/tfs/DefaultCollection/Worksoft/_git/worksoft-em-plugin"
//def branches = ['develop', 'master']
def branches = 'doug/INT-506'
def testVMHost = 'iftestvm'

pipeline {
    agent {
        node {
            label 'master'
            customWorkspace workspacePath
        }
    }
    
    triggers {
        pollSCM('H/15 * * * *')
    }
    
    parameters {
        choice(name: 'branch', choices: branches, description: 'Name of branch to pull and build')
        //string(name: 'PackageStagingDir', defaultValue: "\\\\wsengfiles01\\Automated_Builds\\JenkinsEMPlugin\\${branch}", description: 'location to put the installer staging artifacts')
        //booleanParam(name: 'shouldBuild', description: 'DEBUG USE ONLY: execute build/compile', defaultValue: true)
        //booleanParam(name: 'deployVM', description: 'DEBUG USE ONLY: Create a new VM from template and install/update certify and interfaces', defaultValue: true)
        //booleanParam(name: 'executeTests', description: 'DEBUG USE ONLY: execute tests (certify processes, unit, regression)', defaultValue: true)
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 3, unit: 'HOURS')
    }


    stages {
        stage('Checkout') {
            steps {
                echo "parameters = $params"
                cleanWs cleanWhenFailure: false
		checkout([
		   $class: 'GitSCM',
		   branches: scm.branches,
		   extensions: scm.extensions,
		   userRemoteConfigs: scm.userRemoteConfig,
		   doGenerateSubmoduleConfigurations: false
		])
            }
        }

        /*stage('Pre-Build') {
            steps {
                bat returnStatus: true, script: "powershell -noprofile -command \".\\Versioner.ps1 -u -b ${BUILD_NUMBER}\" >version.txt"
                script {
                    currentBuild.displayName = readFile 'version.txt'
                }
            }
        }*/
	
        stage('Build') {
            when {
                equals expected: true, actual: params.shouldBuild
            }
            steps {
                bat script: "buildit.cmd"
            }
        }
	
        stage('Deploy for Test') {
            when {
                equals expected: true, actual: params.deployVM
            }
            steps {
                echo "------------------------------- Deploying for Tests --------------------------------------"
            }
        }

        stage('Execute Tests') {
            when {
                equals expected: true, actual: params.executeTests
            }
            steps {

                echo "---------------------------------- Exec Tests -------------------------------------------"
            }
        }
        stage('Post Results') {
            steps {
                bat script: "echo post"
            }

        }

    }
    post {
        failure {
            echo "--- Build FAILURE"
        }

        always {
            echo "Pipeline result: ${currentBuild.result}"
            echo "Pipeline currentResult: ${currentBuild.currentResult}"
            //slackSend channel: '#java-oracle-sap-rqm', message: "Postman build ${currentBuild.fullDisplayName}  status:  ${currentBuild.currentResult}"
        }
        changed {
            echo "--- Build CHANGED "
        }
        aborted {
            echo "--- Build ABORTED"
        }
        success {
            echo "--- Build SUCCESS"
        }
        unstable {
            echo "--- Build UNSTABLE"
        }
    }
}